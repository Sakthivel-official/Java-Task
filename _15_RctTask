import React, { useState } from "react";
import {
  AppBar,
  Toolbar,
  Box,
  IconButton,
  Typography,
  Drawer,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  TextField,
  Button,
  CircularProgress,
  styled,
  LinearProgress,
  useTheme,
} from "@mui/material";
import HomeIcon from "@mui/icons-material/Home";
import PersonIcon from "@mui/icons-material/Person";
import EmailIcon from "@mui/icons-material/Email";
import SettingsIcon from "@mui/icons-material/Settings";
import MenuIcon from "@mui/icons-material/Menu";

const CustomLinearProgress = styled(LinearProgress)(({ theme }) => ({
  height: 12,
  borderRadius: 6,
  backgroundColor: theme.palette.grey[300], // Background of the unfilled progress bar
  "& .MuiLinearProgress-bar": {
    borderRadius: 6,
    backgroundColor: "#4caf50", // Green color for the progress bar
    backgroundImage: "linear-gradient(45deg, #66bb6a, #388e3c)", // Optional gradient effect
  },
}));

const ProgressBarWithLabel = ({ value }) => {
  return (
    <Box sx={{ position: "relative", width: "100%" }}>
      <CustomLinearProgress variant="determinate" value={value} />
      <Box
        sx={{
          position: "absolute",
          top: -22,
          left: ${value}%,
          transform: "translateX(-50%)",
        }}
      >
        <Typography
          variant="caption"
          sx={{
            padding: "2px 6px",
            borderRadius: "4px",
            backgroundColor: "#555",
            color: "#fff",
          }}
        >
          {${value}%}
        </Typography>
      </Box>
    </Box>
  );
};

const steps = [
  "User Details",
  "Additional Details",
  "Verification",
  "Reference Details",
];

const formFields = [
  ["User ID", "First Name", "Last Name", "Email"],
  ["Password", "Confirm Password", "Age", "Location"],
  ["Address", "Phone Number", "Pincode", "State"],
  ["Adhar Number", "Passport Number", "Qualification", "Job"],
];

// Define or import 'formFields'
const icons = [
  { label: "Home", icon: <HomeIcon color="primary" /> },
  { label: "Profile", icon: <PersonIcon color="primary" /> },
  { label: "Email", icon: <EmailIcon color="primary" /> },
  { label: "Settings", icon: <SettingsIcon color="primary" /> },
];

const Form3 = () => {
  const theme = useTheme();
  const [activeStep, setActiveStep] = useState(0);
  const [formState, setFormState] = useState(
    formFields.map((fields) => Array(fields.length).fill(""))
  );
  const [drawerOpen, setDrawerOpen] = useState(false);

  const handleNext = () => {
    const allFieldsFilled = formState[activeStep].every(
      (field) => field.trim() !== ""
    );
    if (!allFieldsFilled) {
      alert("Please complete all fields before proceeding.");
      return;
    }
    if (activeStep < steps.length - 1) {
      setActiveStep((prevStep) => prevStep + 1);
    }
  };

  const handleBack = () => {
    if (activeStep > 0) {
      setActiveStep((prevStep) => prevStep - 1);
    }
  };

  const handleInputChange = (stepIndex, fieldIndex, value) => {
    const updatedFormState = [...formState];
    updatedFormState[stepIndex][fieldIndex] = value;
    setFormState(updatedFormState);
  };

  const renderForm = () => {
    return formFields[activeStep].map((field, index) => (
      <TextField
        key={index}
        label={field}
        variant="outlined"
        fullWidth
        sx={{ mb: 2 }}
        size="small"
        value={formState[activeStep][index]}
        onChange={(e) => handleInputChange(activeStep, index, e.target.value)}
      />
    ));
  };

  return (
    <div>
      <AppBar position="static">
        <Toolbar>
          <Box sx={{ display: "flex", alignItems: "center", flexGrow: 1 }}>
            <IconButton
              edge="start"
              color="inherit"
              aria-label="menu"
              sx={{ mr: 2 }}
              onMouseEnter={() => setDrawerOpen(true)}
            >
              <MenuIcon />
            </IconButton>
            <Typography variant="h6" component="div">
              Logo
            </Typography>
            <Drawer
              anchor="left"
              open={drawerOpen}
              onClose={() => setDrawerOpen(false)}
            >
              <Box
                sx={{
                  width: 250,
                  display: "flex",
                  flexDirection: "column",
                  gap: 2,
                  p: 2,
                }}
                role="presentation"
                onMouseLeave={() => setDrawerOpen(false)}
              >
                <List>
                  {icons.map((item, index) => (
                    <ListItem button key={index}>
                      <ListItemIcon>{item.icon}</ListItemIcon>
                      <ListItemText primary={item.label} />
                    </ListItem>
                  ))}
                </List>
              </Box>
            </Drawer>
          </Box>
        </Toolbar>
      </AppBar>

      {/* Stepper with Arrows */}
      <Box sx={{ p: 4, width: "100%", maxWidth: 900, mx: "auto" }}>
        <Box
          sx={{
            display: "flex",
            alignItems: "center",
            justifyContent: "space-between",
            mb: 3,
            width: "100%",
            position: "relative",
          }}
        >
          {steps.map((step, index) => (
            <Box
              key={index}
              sx={{
                display: "flex",
                alignItems: "center",
                flex: 1,
                position: "relative",
                zIndex: 1,
              }}
            >
              {/* Step Arrow Background */}
              <Box
                sx={{
                  position: "absolute",
                  top: 0,
                  bottom: 0,
                  left: 0,
                  right: index === steps.length - 1 ? 0 : "-15px",
                  backgroundColor:
                    index <= activeStep
                      ? theme.palette.primary.main
                      : "lightgray",
                  clipPath:
                    index === steps.length - 1
                      ? "polygon(0 0, 100% 0, 100% 100%, 0 100%)"
                      : "polygon(0 0, calc(100% - 15px) 0, 100% 50%, calc(100% - 15px) 100%, 0 100%)",
                  zIndex: -1,
                }}
              />

              {/* Step Circle */}
              <Box
                sx={{
                  width: 40,
                  height: 40,
                  borderRadius: "50%",
                  backgroundColor:
                    index < activeStep
                      ? "green"
                      : index === activeStep
                      ? "black"
                      : "white",
                  color: index <= activeStep ? "white" : "gray",
                  display: "flex",
                  justifyContent: "center",
                  alignItems: "center",
                  fontSize: 16,
                  fontWeight: "bold",
                  border: "2px solid lightgray",
                  zIndex: 2,
                }}
              >
                {index + 1}
              </Box>
            </Box>
          ))}
        </Box>
      </Box>

      <Box
        sx={{
          display: "flex",
          justifyContent: "space-around",
          width: "80%",
          marginLeft: "15%",
        }}
      >
        {steps.map((e, i) => (
          <p key={i}>{e}</p>
        ))}
      </Box>

      {/* Form Content */}
      <Box
        sx={{
          display: "flex",
          flexDirection: "column",
          justifyContent: "center",
          alignItems: "center",
          bgcolor: "#f5f5f5",
          p: 3,
        }}
      >
        <Box
          sx={{
            bgcolor: "white",
            p: 4,
            borderRadius: 2,
            boxShadow: 3,
            width: "100%",
            maxWidth: 400,
          }}
        >
          <Typography variant="h5" sx={{ mb: 3, textAlign: "center" }}>
            {steps[activeStep]}
          </Typography>
          {renderForm()}
          <Box sx={{ display: "flex", justifyContent: "space-between" }}>
            <Button
              variant="outlined"
              onClick={handleBack}
              disabled={activeStep === 0}
            >
              Back
            </Button>
            <Button variant="contained" onClick={handleNext}>
              {activeStep === steps.length - 1 ? "Finish" : "Next"}
            </Button>
          </Box>
        </Box>
      </Box>
    </div>
  );
};

export default Form3;
